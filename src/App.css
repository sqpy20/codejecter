body {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  overflow-x: hidden;
}

#right_side a,
#left_side a {
  padding: 0;
  margin: 0 0.5rem;
}
#nav_top p{
  color:rgb(40, 38, 38);;
}
#fast_svg{
  fill: rgb(35, 61, 188);
}

/* blob */
.blob {
  border-radius: 50% / 70% 60% 40% 30%;
  width: fit-content;
  animation: animateBlob 3s linear infinite alternate;
  box-shadow: 1px 1px 10px 1px rgb(30, 101, 208);
}

@keyframes animateBlob {
  0% {
    border-radius: 50% / 70% 60% 40% 30%;
    color: rgb(30, 101, 208);

  }

  50% {
    border-radius: 40% 60% 60% 40% / 70% 30% 70% 30%;
    background: rgb(99, 177, 226);
    color: rgb(30, 101, 208);
    box-shadow: 1px 1px 10px 1px rgb(95, 144, 169);

  }

  100% {
    border-radius: 40% 60%;
    background: rgb(182, 218, 241);
    color: rgb(30, 101, 208);
    box-shadow: 1px 1px 10px 1px rgb(255, 255, 255);
  }
}
/* l shape design */
.l-shape-container {
  z-index: 1;
  overflow-x: hidden;
  position: relative;
  width: 20vw; /* Adjust width as needed */
  height: 1340px; /* Adjust height as needed */
}

.vertical {
  position: absolute;
  width: 20px; /* Adjust width as needed */
  height: 100%; /* Make it full height */
}

.horizontal {
  position: absolute;
  border-top-left-radius: 10px; /* Adjust the radius to control the curve */

  width: 150%; /* Make it full width */
  height: 20px; /* Adjust height as needed */
}

/* btn blob */
.svg {
  width: 30vw;
  position: absolute;
 
  transform: translateY(-50%) translateX(-50%);
  z-index: 2;
  filter: drop-shadow(0 0 40px rgba(0, 0, 0, 0.3));

  path {
      cursor: pointer;
      animation: blob 2s infinite forwards;
      transform-origin: 50% 50%;

      &:hover {
          fill: #9cade8;
      }
  }

  text {
      font-size: 45px;

      &:hover {
        fill: #ffffff;
    }
  
    }
    
}

@keyframes blob {
  25% {
      d: path(
          "M 90 210 C 90 180 110 160 130 160 C 160 160 180 140 200 130 C 230 120 270 100 290 140 C 310 170 340 100 360 140 C 370 160 390 180 390 210 C 390 240 380 290 350 280 C 330 270 300 280 280 290 C 260 300 230 300 220 290 C 200 270 160 310 140 280 C 130 260 90 240 90 210 "
      );
      transform: rotate(-5deg);
  }
  50% {
      d: path(
          "M 90 210 C 90 180 100 150 120 130 C 150 100 180 140 200 130 C 230 120 270 100 290 140 C 300 160 330 130 360 140 C 390 150 390 180 390 210 C 390 240 380 300 350 280 C 330 270 320 230 280 260 C 260 280 220 310 200 290 C 180 270 160 280 140 280 C 110 280 90 240 90 210"
      );
  }
  75% {
      d: path(
          "M 90 210 C 90 180 110 180 130 170 C 150 160 170 130 200 130 C 240 130 260 150 290 140 C 310 130 340 120 360 140 C 380 160 390 180 390 210 C 390 240 380 260 350 270 C 320 280 290 270 270 260 C 240 250 230 280 210 290 C 180 310 130 300 110 280 C 90 260 90 240 90 210"
      );
      transform: rotate(5deg);
  }
}
/* bounce */
.bounce{
animation: bounce 1s infinite alternate;
}

@keyframes bounce {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-30px);
  }
}
/* our service scroll */

.wrapper::-webkit-scrollbar{
  display: none;
}
body::-webkit-scrollbar{
  display: none;
}
.no_scrollbar{
  perspective: 10px;
  overflow-y: auto;
  overflow-x: hidden;
}
.no_scrollbar::-webkit-scrollbar{
  display: none;
}

@media screen and (min-height: 600px) and (max-width: 800px) {
  /* Styles to apply when the viewport height is at least 600px 
     and the viewport width is at most 800px */
  /* Add your CSS rules here */
}

.ball{
  width: 20rem;
  height: 20rem;
  animation: floatingBalls 10s cubic-bezier(0.4, -0.01, 0.67, 1.01) 0ms infinite ;
  background: #000;
  position: absolute;
  border-radius: 40% 60% 60% 40% / 70% 30% 70% 30%;
  background: rgb(10, 17, 152);
  color: rgb(30, 101, 208);
  box-shadow: 1px 1px 10px 1px rgb(95, 144, 169);
}
.balltwo{
  animation: floatingBallsTWo 10s cubic-bezier(0.4, -0.01, 0.67, 1.01) 0ms infinite ;

}
@keyframes floatingBalls {
  from {
    transform: translateX(-50%) translateY(-28vw); /* Starting position */
  }
  to {
    transform: translateX(100vw) translateY(50vw); /* Starting position */
  }
}
@keyframes floatingBallsTWo {
  from {
    transform: translateX(100vw) translateY(0vw); /* Starting position */
  }
  to {
    transform: translateX(-100%) translateY(50vw); /* Starting position */
  }
}